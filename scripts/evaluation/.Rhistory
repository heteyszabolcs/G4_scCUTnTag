limits = c(-6, 6)) +
scale_y_continuous(breaks = c(seq(0, 10, 2)),
limits = c(0, 10)) +
labs(
title = "predicted AST vs other G4 differences",
x = "log2FoldChange",
y = "-log10 adj.p-value",
fill = " "
) +
guides(alpha = FALSE, size = FALSE, fill = guide_legend(override.aes = list(size = 5))) +
theme_minimal() +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14, color = "black"),
axis.text.y = element_text(size = 14, color = "black"),
axis.title.x = element_text(size = 20, color = "black"),
axis.title.y = element_text(size = 20, color = "black")
) +
geom_text_repel(label = labels, size = 7, max.overlaps = 100) # add labels
ggplot_volc
sign_AST_vs_nonAST_scBr
cols = c("AST" = set3[1], "non-AST" = set3[9])
plots = list()
for(i in seq(1:length(sign_AST_vs_nonAST_scBr[1:6]))) {
ast_ids = norm[sign_AST_vs_nonAST_scBr[i], rownames(rna@meta.data[which(rna@meta.data$cell_type == "AST"),])]
ast = tibble(type = "AST", expr = ast)
nonast = norm[sign_AST_vs_nonAST_scBr[i], rownames(rna@meta.data[which(rna@meta.data$cell_type != "AST"),])]
nonast = tibble(type = "non-AST", expr = nonast)
both = rbind(ast, nonast)
plots[[i]] = ggplot(both, aes(x = type, y = expr, fill = type)) +
geom_boxplot(color = "black") +
ylim(0, 8) +
labs(
title = sign_AST_vs_nonAST_scBr[i],
x = "",
y = "log norm. expr"
) +
scale_fill_manual(values = cols) +
theme_classic() +
theme(
text = element_text(size = 20),
plot.title = element_text(size = 15),
axis.text.x = element_text(size = 20, color = "black"),
axis.text.y = element_text(size = 20, color = "black")
) +
stat_compare_means(label.y = 7, label.x = 1.15, size = 6)
}
plots = list()
for(i in seq(1:length(sign_AST_vs_nonAST_scBr[1:6]))) {
ast = norm[sign_AST_vs_nonAST_scBr[i], rownames(rna@meta.data[which(rna@meta.data$cell_type == "AST"),])]
ast = tibble(type = "AST", expr = ast)
nonast = norm[sign_AST_vs_nonAST_scBr[i], rownames(rna@meta.data[which(rna@meta.data$cell_type != "AST"),])]
nonast = tibble(type = "non-AST", expr = nonast)
both = rbind(ast, nonast)
plots[[i]] = ggplot(both, aes(x = type, y = expr, fill = type)) +
geom_boxplot(color = "black") +
ylim(0, 8) +
labs(
title = sign_AST_vs_nonAST_scBr[i],
x = "",
y = "log norm. expr"
) +
scale_fill_manual(values = cols) +
theme_classic() +
theme(
text = element_text(size = 20),
plot.title = element_text(size = 15),
axis.text.x = element_text(size = 20, color = "black"),
axis.text.y = element_text(size = 20, color = "black")
) +
stat_compare_means(label.y = 7, label.x = 1.15, size = 6)
}
sign_scBridge_genes_expr_bp = ggarrange(plotlist = plots, ncol = 2, nrow = 3)
sign_scBridge_genes_expr_bp
plots = list()
for(i in seq(1:length(sign_AST_vs_nonAST_scBr[1:10]))) {
ast = norm[sign_AST_vs_nonAST_scBr[i], rownames(rna@meta.data[which(rna@meta.data$cell_type == "AST"),])]
ast = tibble(type = "AST", expr = ast)
nonast = norm[sign_AST_vs_nonAST_scBr[i], rownames(rna@meta.data[which(rna@meta.data$cell_type != "AST"),])]
nonast = tibble(type = "non-AST", expr = nonast)
both = rbind(ast, nonast)
plots[[i]] = ggplot(both, aes(x = type, y = expr, fill = type)) +
geom_boxplot(color = "black") +
ylim(0, 8) +
labs(
title = sign_AST_vs_nonAST_scBr[i],
x = "",
y = "log norm. expr"
) +
scale_fill_manual(values = cols) +
theme_classic() +
theme(
text = element_text(size = 20),
plot.title = element_text(size = 15),
axis.text.x = element_text(size = 20, color = "black"),
axis.text.y = element_text(size = 20, color = "black")
) +
stat_compare_means(label.y = 7, label.x = 1.15, size = 6)
}
sign_scBridge_genes_expr_bp = ggarrange(plotlist = plots, ncol = 2, nrow = 3)
sign_scBridge_genes_expr_bp
sign_AST_vs_nonAST_scBr[1:6]
length(sign_AST_vs_nonAST_scBr[1:10]
)
plots = list()
for(i in seq(1:length(sign_AST_vs_nonAST_scBr[1:10]))) {
ast = norm[sign_AST_vs_nonAST_scBr[i], rownames(rna@meta.data[which(rna@meta.data$cell_type == "AST"),])]
ast = tibble(type = "AST", expr = ast)
nonast = norm[sign_AST_vs_nonAST_scBr[i], rownames(rna@meta.data[which(rna@meta.data$cell_type != "AST"),])]
nonast = tibble(type = "non-AST", expr = nonast)
both = rbind(ast, nonast)
plots[[i]] = ggplot(both, aes(x = type, y = expr, fill = type)) +
geom_boxplot(color = "black") +
ylim(0, 8) +
labs(
title = sign_AST_vs_nonAST_scBr[i],
x = "",
y = "log norm. expr"
) +
scale_fill_manual(values = cols) +
theme_classic() +
theme(
text = element_text(size = 20),
plot.title = element_text(size = 15),
axis.text.x = element_text(size = 20, color = "black"),
axis.text.y = element_text(size = 20, color = "black")
) +
stat_compare_means(label.y = 7, label.x = 1.15, size = 6)
}
sign_scBridge_genes_expr_bp = ggarrange(plotlist = plots, ncol = 2, nrow = 3)
sign_scBridge_genes_expr_bp
sign_scBridge_genes_expr_bp = ggarrange(plotlist = plots, ncol = 2, nrow = 5)
sign_scBridge_genes_expr_bp
ggsave(
glue("{result_folder}scBr_AST_markers-browser_example-expr_bps.pdf"),
plot = sign_scBridge_genes_expr_bp,
width = 12,
height = 16,
device = "pdf"
)
plots = list()
for(i in seq(1:length(sign_AST_vs_nonAST_scBr[1:10]))) {
ast = norm[sign_AST_vs_nonAST_scBr[i], rownames(rna@meta.data[which(rna@meta.data$cell_type == "AST"),])]
ast = tibble(type = "AST", expr = ast)
nonast = norm[sign_AST_vs_nonAST_scBr[i], rownames(rna@meta.data[which(rna@meta.data$cell_type != "AST"),])]
nonast = tibble(type = "non-AST", expr = nonast)
both = rbind(ast, nonast)
plots[[i]] = ggplot(both, aes(x = type, y = expr, fill = type)) +
geom_boxplot(color = "black") +
ylim(0, 6) +
labs(
title = sign_AST_vs_nonAST_scBr[i],
x = "",
y = "log norm. expr"
) +
scale_fill_manual(values = cols) +
theme_classic() +
theme(
text = element_text(size = 20),
plot.title = element_text(size = 15),
axis.text.x = element_text(size = 20, color = "black"),
axis.text.y = element_text(size = 20, color = "black")
) +
stat_compare_means(label.y = 7, label.x = 1.15, size = 6)
}
sign_scBridge_genes_expr_bp = ggarrange(plotlist = plots, ncol = 2, nrow = 5)
sign_scBridge_genes_expr_bp
ggsave(
glue("{result_folder}scBr_AST_markers-browser_example-expr_bps.pdf"),
plot = sign_scBridge_genes_expr_bp,
width = 12,
height = 16,
device = "pdf"
)
predicted_cellids = list()
for(i in 1:length(rownames(meta))) {
if(rownames(meta)[i] %in% pred$V1) {
predicted_cellids[i] = pred[which(pred$V1 == rownames(meta)[i]), 2]
}
}
predicted_cellids = unlist(predicted_cellids)
meta = meta %>%
mutate(scBridge_pred = predicted_cellids)
predicted_cellids
predicted_cellids = list()
for(i in 1:length(rownames(meta))) {
if(rownames(meta)[i] %in% pred$V1) {
predicted_cellids[i] = pred[which(pred$V1 == rownames(meta)[i]), 2]
}
}
predicted_cellids = unlist(predicted_cellids)
meta = meta %>%
dplyr::filter(predicted_cellids %in% rownames(.)) %>%
mutate(scBridge_pred = predicted_cellids)
meta
meta = meta %>%
dplyr::filter(predicted_cellids %in% barcodes_scbridge | barcodes_scbridge_others) %>%
mutate(scBridge_pred = predicted_cellids)
meta = meta %>%
dplyr::filter(predicted_cellids %in% (barcodes_scbridge | barcodes_scbridge_others)) %>%
mutate(scBridge_pred = predicted_cellids)
CoveragePlot(
object = sorted,
region = "Klk6",
assay = "peaks",
annotation = TRUE,
show.bulk = TRUE,
ymax = 2,
extend.upstream = 2000,
group.by = "scBridge_pred",
peaks = TRUE)
predicted_cellids = list()
for(i in 1:length(rownames(meta))) {
if(rownames(meta)[i] %in% pred$V1) {
predicted_cellids[i] = pred[which(pred$V1 == rownames(meta)[i]), 2]
}
}
predicted_cellids = unlist(predicted_cellids)
predicted_cellids
predicted_cellids = predicted_cellids[which(predicted_cellids %in% rownames(sorted@meta.data))]
CoveragePlot(
object = sorted,
region = "Klk6",
assay = "peaks",
annotation = TRUE,
show.bulk = TRUE,
ymax = 2,
extend.upstream = 2000,
group.by = "scBridge_pred",
peaks = TRUE)
meta = meta %>%
mutate(scBridge_pred = predicted_cellids)
predicted_cellids
# Klk6 coverage plot
predicted_cellids = list()
for(i in 1:length(rownames(meta))) {
if(rownames(meta)[i] %in% pred$V1) {
predicted_cellids[i] = pred[which(pred$V1 == rownames(meta)[i]), 2]
}
}
predicted_cellids = unlist(predicted_cellids)
rownames(sorted@meta.data)
predicted_cellids
pred
rownames(meta)
# Klk6 coverage plot
predicted_cellids = list()
for(i in 1:length(rownames(meta))) {
if(rownames(meta)[i] %in% pred$V1) {
predicted_cellids[i] = pred[which(pred$V1 == rownames(sorted@meta.data)[i]), 2]
}
}
meta = meta %>%
mutate(scBridge_pred = predicted_cellids)
CoveragePlot(
object = sorted,
region = "Klk6",
assay = "peaks",
annotation = TRUE,
show.bulk = TRUE,
ymax = 2,
extend.upstream = 2000,
group.by = "scBridge_pred",
peaks = TRUE)
sorted@meta.data = meta
CoveragePlot(
object = sorted,
region = "Klk6",
assay = "peaks",
annotation = TRUE,
show.bulk = TRUE,
ymax = 2,
extend.upstream = 2000,
group.by = "scBridge_pred",
peaks = TRUE)
scbr_rna = readH5AD("../../results/scBridge/output/Bartosovic_scRNA-Seq-integrated.h5ad")
pacman::p_load("tidyverse",
"Seurat",
"zellkonverter",
"Signac",
"wigglescout",
"data.table",
"ggplot2",
"ggpubr",
"glue",
"matrixStats",
"ComplexHeatmap",
"circlize",
"RColorBrewer",
"topGO",
"outliers",
"enrichR",
"ggrepel",
"ggrastr"
)
scbr_rna = readH5AD("../../results/scBridge/output/Bartosovic_scRNA-Seq-integrated.h5ad")
scbr_rna = as.Seurat(scbr_rna, counts = "X", data = NULL)
featureplots_rna = list()
genes = c("Tnik", "Pitpnc1", "Pbx1", "Nwd1")
for(gene in genes) {
plot = FeaturePlot(object = scbr_rna, features = gene,
order = FALSE, raster = TRUE, reduction = "X_umap", pt.size = 2) +
#scale_color_gradient2(low = "#f0f0f0", mid = "#f0f0f0", high = "red") +
scale_color_viridis() +
xlim(-12, 25) +
ylim(-20, 20) +
ggtitle(gene) +
xlab("UMAP_1") +
ylab("UMAP_2") +
theme(
text = element_text(size = 25),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 25, color = "black"),
axis.text.y = element_text(size = 25, color = "black")
)
featureplots_rna[[gene]] = plot
}
pacman::p_load("tidyverse",
"Seurat",
"zellkonverter",
"Signac",
"wigglescout",
"data.table",
"ggplot2",
"ggpubr",
"glue",
"matrixStats",
"ComplexHeatmap",
"circlize",
"RColorBrewer",
"topGO",
"outliers",
"enrichR",
"ggrepel",
"ggrastr",
"viridis"
)
for(gene in genes) {
plot = FeaturePlot(object = scbr_rna, features = gene,
order = FALSE, raster = TRUE, reduction = "X_umap", pt.size = 2) +
#scale_color_gradient2(low = "#f0f0f0", mid = "#f0f0f0", high = "red") +
scale_color_viridis() +
xlim(-12, 25) +
ylim(-20, 20) +
ggtitle(gene) +
xlab("UMAP_1") +
ylab("UMAP_2") +
theme(
text = element_text(size = 25),
plot.title = element_text(size = 20),
axis.text.x = element_text(size = 25, color = "black"),
axis.text.y = element_text(size = 25, color = "black")
)
featureplots_rna[[gene]] = plot
}
ast_featureplotes_rna = ggarrange(
plotlist = featureplots_rna,
ncol = 2,
nrow = 2
)
ast_featureplotes_rna
ggsave(
glue("{result_folder}scBr_predAST_vs_nonAST_volc.pdf"),
width = 10,
height = 10,
device = "pdf"
)
ggsave(
glue("{result_folder}scBr_predAST_vs_nonAST_volc.png"),
width = 10,
height = 10,
dpi = 300
)
ggplot_volc
# export in pdf and png
ggsave(
glue("{result_folder}scBr_predAST_vs_nonAST_volc.pdf"),
width = 10,
height = 10,
device = "pdf"
)
ggsave(
glue("{result_folder}scBr_predAST_vs_nonAST_volc.png"),
width = 10,
height = 10,
dpi = 300
)
ast_featureplotes_rna
ggsave(
glue("{result_folder}scBr_AST_markers-browser_example-expr_featureplots.pdf"),
width = 10,
height = 10,
device = "pdf"
)
ggsave(
glue("{result_folder}scBr_AST_markers-browser_example-expr_featureplots.png"),
width = 10,
height = 10,
dpi = 300
)
ggsave(
glue("{result_folder}scBr_AST_markers-browser_example-expr_featureplots.pdf"),
width = 12,
height = 10,
device = "pdf"
)
ggsave(
glue("{result_folder}scBr_AST_markers-browser_example-expr_featureplots.png"),
width = 12,
height = 10,
dpi = 300
)
ggsave(
glue("{result_folder}scBr_AST_markers-browser_example-expr_bps.png"),
plot = sign_scBridge_genes_expr_bp,
width = 12,
height = 16
)
if (!require("pacman"))
install.packages("pacman")
pacman::p_load("tidyverse",
"Seurat",
"zellkonverter",
"Signac",
"wigglescout",
"data.table",
"ggplot2",
"ggpubr",
"glue",
"matrixStats",
"ComplexHeatmap",
"circlize",
"RColorBrewer",
"topGO",
"outliers",
"enrichR",
"ggrepel",
"ggrastr",
"viridis"
)
# helper function for annotation
source("../../utils/annotation.R")
# folders
result_folder = "../../results/astrocyte_exploration/"
# Seurat objects
sorted = readRDS(file = "../../results/Seurat/GFP_sorted_mousebrain/res0.8/outputs/Seurat_object.Rds")
rna = readRDS(file = "../../data/scRNA-Seq/scRNA_Seq-mouse_brain.Rds")
rna@meta.data = rna@meta.data %>%
mutate(cell_type = str_replace_all(cell_type, pattern = "Astrocytes", replacement = "AST")) %>%
mutate(cell_type = str_replace_all(cell_type, pattern = "Oligodendrocytes", replacement = "MOL"))
norm = rna[['RNA']]@data
# scRNA-Seq markers
markers = read_tsv("../../results/Seurat/GFP_sorted_mousebrain/res0.8/integration/outputs/scRNA-Seq-FindAllMarkers_output.tsv")
markers = markers[markers$p_val < 0.05 &
markers$avg_log2FC > 0.5, ]
markers = markers %>%
mutate(cluster = str_replace_all(cluster, pattern = "Astrocytes", replacement = "AST")) %>%
mutate(cluster = str_replace_all(cluster, pattern = "Oligodendrocytes", replacement = "MOL"))
# scBridge outputs
scbr_rna = readH5AD("../../results/scBridge/output/Bartosovic_scRNA-Seq-integrated.h5ad")
scbr_rna = as.Seurat(scbr_rna, counts = "X", data = NULL)
rel = fread("../../results/scBridge/output/scbridge_reliability.csv")
pred = fread("../../results/scBridge/output/scbridge_predictions.csv", header = TRUE)
pred = pred %>%
mutate(Prediction = str_replace_all(Prediction, pattern = "Astrocytes", replacement = "AST")) %>%
mutate(Prediction = str_replace_all(Prediction, pattern = "Oligodendrocytes", replacement = "MOL"))
# Seurat prediction scores
pred_score = readRDS("../../results/Seurat/GFP_sorted_mousebrain/res0.8/integration/outputs/g4_cell_label_preds.Rds")
pred_score = t(pred_score@data)
ids = rownames(pred_score)
pred_score = as_tibble(pred_score)
colnames(pred_score) = c("OEC","AST","MOL","Pericytes","VEC","VLMC","COP-NFOL","OPC","max")
pred_score = pred_score %>%
dplyr::select(-max) %>% mutate(cell_id = ids) %>% dplyr::filter(AST > 0.90)
ast_ids = pred_score %>% pull(cell_id)
# AST scRNA-Seq markers
ast_markers = markers %>%
mutate(cluster = ifelse(str_detect(markers$cluster, "AST"), "AST", cluster)) %>%
dplyr::filter(str_detect(cluster, "AST")) %>%
arrange(desc(avg_log2FC)) %>%
top_n(500, wt = avg_log2FC)
all_ast_markers = ast_markers$gene
ast_markers = unique(ast_markers$gene)[1:20]
# highly predicted AST cell ids
barcodes_seurat = pred_score$cell_id[which(pred_score$AST > 0.90)]
barcodes_scbridge = pred %>% filter(Prediction == "AST") %>% pull(V1)
barcodes_scbridge_others = pred %>% filter(Prediction != "AST") %>%
filter(Prediction != "Novel (Most Unreliable)") %>%
pull(V1)
barcodes = unique(c(barcodes_seurat, barcodes_scbridge))
barcodes_df = tibble(AST = barcodes, type = "AST")
write_tsv(barcodes_df, glue("{result_folder}Pred_AST-barcodes.tsv"))
barcodes_non_ast = rownames(sorted@meta.data)[which(!rownames(sorted@meta.data) %in% barcodes)]
barcodes_non_ast_df = tibble(non_AST = barcodes_non_ast, type = "non_AST")
write_tsv(barcodes_non_ast_df, glue("{result_folder}Pred_non_AST-barcodes.tsv"))
# differential GA scores
barcodes = barcodes_df %>% dplyr::filter(AST %in% rownames(sorted@meta.data)) %>%
pull(AST)
barcodes_non_ast = barcodes_non_ast_df %>% dplyr::filter(non_AST %in% rownames(sorted@meta.data)) %>%
pull(non_AST)
diff_AST_vs_nonAST_seurat = FindMarkers(
sorted,
ident.1 = barcodes,
ident.2 = barcodes_non_ast,
only.pos = FALSE,
assay = "GA",
logfc.threshold = 0,
test.use = "LR",
latent.vars = "peak_region_fragments"
)
